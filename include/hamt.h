#ifndef HAMT_H
#define HAMT_H

#include <stdint.h>

#ifndef SEED
#define SEED 73802
#endif

#define NUM_CHILDREN 64

// m is the size of the 
uint64_t xorhash_with_seed(char *s, uint64_t seed, uint64_t m) {
    uint64_t h = seed;
    char c;
    for(int i=0; (c = s[i]) != '\0'; i++) {
        h = h ^ ( (h << 5) + c + (h >> 2) );
    }
    return h%m;
}

inline uint64_t xorhash(char *s, uint64_t m) {
  return xorhash_with_seed(s, SEED, m);
}

uint32_t hash32(uint64_t x) {
  uint32_t low = (uint32_t)x;
  uint32_t high = (uint32_t)(x >> 32);

  const static uint64_t a = SEED;
  const static uint64_t b = 1391994534;
  const static uint64_t c = 2147483647;

  return ((a * low + b * high + c) >> 32);

}

inline uint64_t hash64(uint64_t x) {
  uint64_t all = 0;
  uint32_t low = hash32(x & 0x00000000FFFFFFFF);
  uint32_t high = hash32(x & 0xFFFFFFFF00000000);
  all = (((uint64_t)high) << 32) | low;
  return all;
}

// FUCKING DUMB but 
// compiler will optimise the living hell out of this.
// should be ~5 instructions after O3
inline uint64_t valmax63_to_bitpos(uint64_t val) {
  switch (val) {
    case 0: return  0b0000000000000000000000000000000000000000000000000000000000000001;
    case 1: return  0b0000000000000000000000000000000000000000000000000000000000000010;
    case 2: return  0b0000000000000000000000000000000000000000000000000000000000000100;
    case 3: return  0b0000000000000000000000000000000000000000000000000000000000001000;
    case 4: return  0b0000000000000000000000000000000000000000000000000000000000010000;
    case 5: return  0b0000000000000000000000000000000000000000000000000000000000100000;
    case 6: return  0b0000000000000000000000000000000000000000000000000000000001000000;
    case 7: return  0b0000000000000000000000000000000000000000000000000000000010000000;
    case 8: return  0b0000000000000000000000000000000000000000000000000000000100000000;
    case 9: return  0b0000000000000000000000000000000000000000000000000000001000000000;
    case 10: return 0b0000000000000000000000000000000000000000000000000000010000000000;
    case 11: return 0b0000000000000000000000000000000000000000000000000000100000000000;
    case 12: return 0b0000000000000000000000000000000000000000000000000001000000000000;
    case 13: return 0b0000000000000000000000000000000000000000000000000010000000000000;
    case 14: return 0b0000000000000000000000000000000000000000000000000100000000000000;
    case 15: return 0b0000000000000000000000000000000000000000000000001000000000000000;
    case 16: return 0b0000000000000000000000000000000000000000000000010000000000000000;
    case 17: return 0b0000000000000000000000000000000000000000000000100000000000000000;
    case 18: return 0b0000000000000000000000000000000000000000000001000000000000000000;
    case 19: return 0b0000000000000000000000000000000000000000000010000000000000000000;
    case 20: return 0b0000000000000000000000000000000000000000000100000000000000000000;
    case 21: return 0b0000000000000000000000000000000000000000001000000000000000000000;
    case 22: return 0b0000000000000000000000000000000000000000010000000000000000000000;
    case 23: return 0b0000000000000000000000000000000000000000100000000000000000000000;
    case 24: return 0b0000000000000000000000000000000000000001000000000000000000000000;
    case 25: return 0b0000000000000000000000000000000000000010000000000000000000000000;
    case 26: return 0b0000000000000000000000000000000000000100000000000000000000000000;
    case 27: return 0b0000000000000000000000000000000000001000000000000000000000000000;
    case 28: return 0b0000000000000000000000000000000000010000000000000000000000000000;
    case 29: return 0b0000000000000000000000000000000000100000000000000000000000000000;
    case 30: return 0b0000000000000000000000000000000001000000000000000000000000000000;
    case 31: return 0b0000000000000000000000000000000010000000000000000000000000000000;
    case 32: return 0b0000000000000000000000000000000100000000000000000000000000000000;
    case 33: return 0b0000000000000000000000000000001000000000000000000000000000000000;
    case 34: return 0b0000000000000000000000000000010000000000000000000000000000000000;
    case 35: return 0b0000000000000000000000000000100000000000000000000000000000000000;
    case 36: return 0b0000000000000000000000000001000000000000000000000000000000000000;
    case 37: return 0b0000000000000000000000000010000000000000000000000000000000000000;
    case 38: return 0b0000000000000000000000000100000000000000000000000000000000000000;
    case 39: return 0b0000000000000000000000001000000000000000000000000000000000000000;
    case 40: return 0b0000000000000000000000010000000000000000000000000000000000000000;
    case 41: return 0b0000000000000000000000100000000000000000000000000000000000000000;
    case 42: return 0b0000000000000000000001000000000000000000000000000000000000000000;
    case 43: return 0b0000000000000000000010000000000000000000000000000000000000000000;
    case 44: return 0b0000000000000000000100000000000000000000000000000000000000000000;
    case 45: return 0b0000000000000000001000000000000000000000000000000000000000000000;
    case 46: return 0b0000000000000000010000000000000000000000000000000000000000000000;
    case 47: return 0b0000000000000000100000000000000000000000000000000000000000000000;
    case 48: return 0b0000000000000001000000000000000000000000000000000000000000000000;
    case 49: return 0b0000000000000010000000000000000000000000000000000000000000000000;
    case 50: return 0b0000000000000100000000000000000000000000000000000000000000000000;
    case 51: return 0b0000000000001000000000000000000000000000000000000000000000000000;
    case 52: return 0b0000000000010000000000000000000000000000000000000000000000000000;
    case 53: return 0b0000000000100000000000000000000000000000000000000000000000000000;
    case 54: return 0b0000000001000000000000000000000000000000000000000000000000000000;
    case 55: return 0b0000000010000000000000000000000000000000000000000000000000000000;
    case 56: return 0b0000000100000000000000000000000000000000000000000000000000000000;
    case 57: return 0b0000001000000000000000000000000000000000000000000000000000000000;
    case 58: return 0b0000010000000000000000000000000000000000000000000000000000000000;
    case 59: return 0b0000100000000000000000000000000000000000000000000000000000000000;
    case 60: return 0b0001000000000000000000000000000000000000000000000000000000000000;
    case 61: return 0b0010000000000000000000000000000000000000000000000000000000000000;
    case 62: return 0b0100000000000000000000000000000000000000000000000000000000000000;
    case 63: return 0b1000000000000000000000000000000000000000000000000000000000000000;
    default:
             return 0;
  }
}

#endif // HAMT_H
